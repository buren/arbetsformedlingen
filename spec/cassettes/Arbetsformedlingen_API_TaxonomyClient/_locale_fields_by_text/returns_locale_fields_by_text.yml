---
http_interactions:
- request:
    method: post
    uri: http://api.arbetsformedlingen.se/taxonomi/v0/TaxonomiService.asmx
    body:
      encoding: UTF-8
      string: |
        <?xml version="1.0" encoding="UTF-8"?>
        <soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
          <soap12:Body>
            <GetLocaleFieldsByText xmlns="urn:ams.se:Taxonomy">
              <languageId>502</languageId>
              <term>A</term>
              <exactMatch>false</exactMatch>
            </GetLocaleFieldsByText>
          </soap12:Body>
        </soap12:Envelope>
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.arbetsformedlingen.se
      Content-Type:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 09 Dec 2018 16:35:01 GMT
      Server:
      - Microsoft-IIS/7.5
      Cache-Control:
      - private, max-age=0
      Content-Type:
      - application/soap+xml; charset=utf-8
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Length:
      - '8800'
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-JWT-Assertion, Origin, X-Requested-With, Content-Type, Accept
      Access-Control-Allow-Methods:
      - GET, OPTIONS, HEAD, PUT, POST, DELETE
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 09 Dec 2018 16:35:02 GMT
recorded_with: VCR 3.0.3
